local syntax = require "core.syntax"

syntax.add {
  files = "%.nim$",
  headers = "^#!.*[ /]nim",
  comment = "#",
  patterns = {
    -- Multiline comment dont support nesting
    { pattern = { "#%[", "%]#" },                   type = "comment"  },
    { pattern = { "#", "\n" },                      type = "comment"  },
    { pattern = { '[rR]?"""', '"""' },              type = "string"   },
    { pattern = { '[rR]?"', '"', '\\' },            type = "string"   },
    { pattern = "'\\?.'",                           type = "string"   },
    { pattern = "{%..*%.}",                         type = "keyword"   },
    { pattern = "0[xX][%d_a-fA-F]+",                type = "number"   },
    { pattern = "0[bB][01_]+",                      type = "number"   },
    { pattern = "0o[01234567_]+",                   type = "number"   },
    { pattern = "-?[%d_]+[%d_%.eE]*",               type = "number"   },
    { pattern = "[%a_][%w_]*%f[(]",                 type = "function" },
    { pattern = "`[%+%-=/%*%^%%<>!~|&@%$%?.:\\]+`", type = "function" },
    { pattern = "[%+%-=/%*%^%%<>!~|&@%$%?.:\\]+",   type = "operator" },
    { pattern = "[%a_][%w_]*",                      type = "symbol"   },
  },
  symbols = {
    ["addr"]      = "keyword",
    ["and"]       = "operator",
    ["as"]        = "operator",
    ["asm"]       = "keyword",
    ["bind"]      = "keyword",
    ["block"]     = "keyword2",
    ["break"]     = "keyword2",
    ["case"]      = "keyword2",
    ["cast"]      = "keyword",
    ["concept"]   = "keyword",
    ["const"]     = "keyword",
    ["continue"]  = "keyword2",
    ["converter"] = "keyword",
    ["defer"]     = "keyword",
    ["discard"]   = "keyword",
    ["distinct"]  = "keyword",
    ["div"]       = "operator",
    ["do"]        = "keyword2",
    ["elif"]      = "keyword2",
    ["else"]      = "keyword2",
    ["end"]       = "keyword2",
    ["enum"]      = "keyword",
    ["except"]    = "keyword2",
    ["export"]    = "keyword",
    ["finally"]   = "keyword2",
    ["for"]       = "keyword2",
    ["from"]      = "operator",
    ["func"]      = "keyword",
    ["if"]        = "keyword2",
    ["import"]    = "keyword",
    ["in"]        = "operator",
    ["include"]   = "keyword",
    ["interface"] = "keyword",
    ["is"]        = "operator",
    ["isnot"]     = "keyword",
    ["iterator"]  = "keyword",
    ["let"]       = "keyword",
    ["macro"]     = "keyword",
    ["method"]    = "keyword",
    ["mixin"]     = "keyword",
    ["mod"]       = "operator",
    ["nil"]       = "keyword",
    ["not"]       = "operator",
    ["notin"]     = "operator",
    ["object"]    = "keyword",
    ["of"]        = "operator",
    ["or"]        = "operator",
    ["out"]       = "keyword",
    ["proc"]      = "keyword",
    ["ptr"]       = "keyword",
    ["raise"]     = "keyword2",
    ["ref"]       = "keyword",
    ["return"]    = "keyword2",
    ["shl"]       = "operator",
    ["shr"]       = "operator",
    ["static"]    = "keyword",
    ["template"]  = "keyword",
    ["try"]       = "keyword2",
    ["tuple"]     = "keyword",
    ["type"]      = "keyword",
    ["using"]     = "keyword",
    ["var"]       = "keyword",
    ["when"]      = "keyword2",
    ["while"]     = "keyword2",
    ["xor"]       = "operator",
    ["yield"]     = "keyword2",
  }
}
